package com.weedmaps.dataaccess.repo.impl;

import java.util.Date;
import java.util.List;
import java.util.Objects;

import org.springframework.stereotype.Repository;

import com.weedmaps.dataaccess.entity.${type.name};
import com.weedmaps.dataaccess.repo.GraphQLReadOnlyRepository;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Repository
public class ${type.name}Repo extends GraphQLReadOnlyRepository<${type.name}> {

    private static final String ENTITY = ${type.name}.getEntityName();

    protected String getQuery(String name, String filter) {

        StringBuilder queryBuilder = new StringBuilder();

        queryBuilder.append("query GET_${type.tableName}_" + name +" {\r\n");
        queryBuilder.append(" $type.tableName ");
        if(filter != null && filter.trim().length() >= 1){
            queryBuilder.append(filter);
        }
        queryBuilder.append("{\r\n");
        queryBuilder.append("   id\r\n");
#foreach( $field in $type.fields)
        queryBuilder.append("   $field.tableFieldName\r\n");
#end
        queryBuilder.append("   is_deleted\r\n");
        queryBuilder.append("   created_at\r\n");
        queryBuilder.append("   created_by\r\n");
        queryBuilder.append("   updated_at\r\n");
        queryBuilder.append("   updated_by\r\n");
        queryBuilder.append(" }\r\n");
        queryBuilder.append("}\r\n");

        return queryBuilder.toString();
    }

    public List<$type.name> getAll${type.plural}(){
        final String name = "All";
        final String filter = "";
        log.debug("Fetching query for ${type.name}(s): {} with filter: {}", name, filter);
        return execute(name, filter, ENTITY, ${type.name}.class);
    } 

    public List<$type.name> getActive${type.plural}(){
        final String name = "Active";
        final String filter = "(where: {is_deleted: {_eq: false}})";
        log.debug("Fetching query for ${type.name}(s): {} with filter: {}", name, filter);
        return execute(name, filter, ENTITY, ${type.name}.class);
    } 

    public List<$type.name> getActive${type.plural}After(Date lastModified){
        Objects.requireNonNull(lastModified);
        String lastModifiedDate = YYYY_MM_DD_FORMATTER.format(lastModified);
        final String name = "UpdatedAfter";
        final String filter = "(where: {is_deleted: {_eq: false}, updated_at: {_gte: \"" + lastModifiedDate + "\"}})";
        log.debug("Fetching query for ${type.name}(s): {} with filter: {}", name, filter);
        return execute(name, filter, ENTITY, ${type.name}.class);
    } 

#foreach( $query in $type.queries )
    public List<$type.name> get${query.name}(
#foreach( $field in $query.fields )
#if ( $velocityCount < $query.fields.size() )
            final List<Integer> ${field},
#else
            final List<Integer> ${field}) {
#end
#end
#foreach( $field in $query.fields )
        Objects.requireNonNull($field);
#end
        final String name = "${query.name}";
        final String filter = "${query.filter}";
        log.debug("Fetching query for ${type.name}(s): {} with filter: {}", name, filter);
        return execute(name, filter, ENTITY, ${type.name}.class);
    }
#end

}